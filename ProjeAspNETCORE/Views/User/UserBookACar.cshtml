@model ProjeAspNETCORE.Models.BookACar
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "UserBookACar";
    Layout = "~/Views/User/UserHomePage.cshtml";
}
<head>
    <meta charset="utf-8" />
    <title>Book Car - @Model.Car.Name</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&family=Open+Sans&display=swap" rel="stylesheet">
    <link href="~/SideBarTemplate/bootstrap.min.css" rel="stylesheet" />
    <style>
        .container.mt-5 {
            padding-top: 100px;
        }

        .car-image {
            max-height: 300px;
            object-fit: cover;
        }

        .price-display {
            font-size: 1.5rem;
            font-weight: bold;
            color: #0d6efd;
        }

        .date-error {
            color: #dc3545;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-6">
                <h2>Book @Model.Car.Name</h2>
                <img src="@Model.Car.ImagePath" alt="Car Image" class="img-fluid rounded car-image mb-3" />

                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@Model.Car.Brand @Model.Car.Name</h5>
                        <p class="card-text">@Model.Car.Description</p>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Type: @Model.Car.Type</li>
                            <li class="list-group-item">Transmission: @Model.Car.Transmission</li>
                            <li class="list-group-item">Year: @Model.Car.Year</li>
                            <li class="list-group-item">Color: @Model.Car.Color</li>
                            <li class="list-group-item">Daily Price: $@Model.Car.Price</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4>Booking Details</h4>
                    </div>
                    <div class="card-body">


                        <form asp-action="BookACar" asp-controller="User" asp-route-carId="@Model.Car.Id" method="post">
                            <input type="hidden" name="UserId" value="@Model.User.Id" />
                            <input type="hidden" name="CarId" value="@Model.Car.Id" />

                            <div class="mb-3">
                                <label for="fromDate" class="form-label">From Date</label>
                                <input type="date" class="form-control" id="fromDate" name="FromDate" required />
                            </div>

                            <div class="mb-3">
                                <label for="toDate" class="form-label">To Date</label>
                                <input type="date" class="form-control" id="toDate" name="ToDate" required />
                                <div id="dateError" class="date-error mt-1">End date must be after start date</div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Total Days</label>
                                <div id="totalDays">0</div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Total Price</label>
                                <div class="price-display" id="totalPrice">$0.00</div>
                            </div>
                            <div class="text-danger">
                                @{
                                    if (ViewData.ModelState.TryGetValue("CarDateNotBookable", out var entry) && entry.Errors.Any())
                                    {
                                        foreach (var error in entry.Errors)
                                        {
                                            <p class="text-danger">@error.ErrorMessage</p>
                                        }
                                    }
                                }
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Book Now</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const fromDateInput = document.getElementById('fromDate');
            const toDateInput = document.getElementById('toDate');
            const totalDaysDisplay = document.getElementById('totalDays');
            const totalPriceDisplay = document.getElementById('totalPrice');
            const dateError = document.getElementById('dateError');
            const dailyPrice = @Model.Car.Price;

            const today = new Date().toISOString().split('T')[0];
            fromDateInput.min = today;

            function calculatePrice() {
                const fromDate = new Date(fromDateInput.value);
                const toDate = new Date(toDateInput.value);

                if (fromDate && toDate && fromDate < toDate) {
                    dateError.style.display = 'none';
                    const diffTime = Math.abs(toDate - fromDate);
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                    const totalPrice = diffDays * dailyPrice;

                    totalDaysDisplay.textContent = diffDays;
                    totalPriceDisplay.textContent = '$' + totalPrice.toFixed(2);
                } else if (fromDate && toDate) {
                    dateError.style.display = 'block';
                }
            }

            fromDateInput.addEventListener('change', function () {
                toDateInput.min = this.value;
                if (toDateInput.value && new Date(toDateInput.value) < new Date(this.value)) {
                    toDateInput.value = '';
                }
                calculatePrice();
            });

            toDateInput.addEventListener('change', calculatePrice);
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/bootstrap.bundle.min.js"></script>
</body>
